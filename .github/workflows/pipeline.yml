---
name: Angular Frontend Pipeline

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint Angular Project
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3.4.0
        with:
          node-version: '22'

      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests
    needs:
      - lint
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3.4.0
        with:
          node-version: '22'

      - run: npm ci
      - run: npm run test

#  e2e-test:
#    runs-on: ubuntu-latest
#    name: Run End to End Tests
#    needs:
#      - lint
#    steps:
#      - uses: actions/checkout@v4.2.2
#        with:
#          fetch-depth: 0
#


#     Tried to implement e2e tests with downloaded backend artifact but failed. -> Backend not reachable -> job commented out
#      - name: Download Backend Artifact
#        run: |
#          ARTIFACT_URL=$(curl -s -H "Authorization: token ${{ secrets.SWM2_2AT_E2E_TOKEN }}" \
#            "https://api.github.com/repos/kammererlara/swm2_2at_kammerer_backend/actions/artifacts" \
#            | jq -r '.artifacts | map(select(.name=="spring-boot-jar")) | first | .archive_download_url')
#
#          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" == "null" ]; then
#            echo "Error: No valid artifact URL found!"
#            exit 1
#          fi
#
#          echo "Downloading artifact from: $ARTIFACT_URL"
#          curl -L -o backend-artifact.zip -H "Authorization: token ${{ secrets.SWM2_2AT_E2E_TOKEN }}" "$ARTIFACT_URL"
#
#          unzip backend-artifact.zip -d backend/
#
#      - name: Debug Entpacktes Artifact
#        run: |
#          echo "Verzeichnisstruktur nach Entpacken:"
#          ls -R backend/
#          echo "Dateiliste des ZIP-Archivs:"
#          unzip -l backend-artifact.zip
#
#      - name: Install Java 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      - name: Start Backend
#        run: |
#          JAR_FILE=$(find backend -name "*.jar" | grep -v "plain" | head -n 1)
#
#          if [ -z "$JAR_FILE" ]; then
#            echo "Error: Keine ausf√ºhrbare JAR-Datei gefunden!"
#            exit 1
#          fi
#
#          echo "Starte Backend mit Umgebungsvariable AVWX_TOKEN: $AVWX_TOKEN"
#          export SPRING_APPLICATION_JSON="{\"token\":{\"avwx\":\"$AVWX_TOKEN\"}}"
#
#          java -jar "$JAR_FILE" --spring.config.name=application-dev &
#
#          for i in {1..20}; do
#            if curl --output /dev/null --silent --head --fail http://localhost:8080/actuator/health; then
#              echo "Backend ist erreichbar!"
#              exit 0
#            fi
#            echo "Warte auf Backend..."
#            sleep 5
#          done
#          echo "Backend nicht erreichbar!"
#          exit 1
#


#      - uses: actions/setup-node@v3.4.0
#        with:
#          node-version: '22'
#
#      - run: npm ci
#      - run: npx playwright install --with-deps
#      - run: npx playwright test

  build:
    runs-on: ubuntu-latest
    name: Build Angular Project
    needs:
      - test
#      - e2e-test
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3.4.0
        with:
          node-version: '22'

      - run: npm ci

      - name: Inject AVWX_TOKEN into environment.ts
        run: |
          sed -i "s|avwxToken: ''|avwxToken: '${{ secrets.AVWX_TOKEN }}'|g" src/environment/environment.ts
      - run: npm run build
        env:
          AVWX_TOKEN: ${{ secrets.AVWX_TOKEN }}

      - uses: actions/upload-artifact@v4.4.3
        with:
          name: angular-dist
          path: dist/
